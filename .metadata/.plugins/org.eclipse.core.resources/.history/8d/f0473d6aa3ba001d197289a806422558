package com.ersin.retrofitDemo.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.ersin.retrofitDemo.business.abstracts.CategoryService;
import com.ersin.retrofitDemo.business.core.utilities.mappers.ModelMapperService;
import com.ersin.retrofitDemo.business.requests.category.CreateCategoryRequest;
import com.ersin.retrofitDemo.business.requests.category.UpdateCategoryRequest;
import com.ersin.retrofitDemo.business.responses.category.GetAllCategoryResponse;
import com.ersin.retrofitDemo.dataAccess.abstracts.CategoryRepository;
import com.ersin.retrofitDemo.entities.concretes.Categories;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class CategoryManager implements CategoryService {
	private CategoryRepository categoryRepository;
	private ModelMapperService mapperService;

	@Override
	public List<GetAllCategoryResponse> getAll() {
		List<Categories> categories = categoryRepository.findAll();
		List<GetAllCategoryResponse> categoryResponse = categories.stream()
				.map(category -> mapperService.forResponse().map(categories, GetAllCategoryResponse.class))
				.collect(Collectors.toList());
		return categoryResponse;
	}

	@Override
	public void addCategory(CreateCategoryRequest createcategoryRequest) {
		Categories category = mapperService.forRequest().map(createcategoryRequest, Categories.class);
		categoryRepository.save(category);
	}

	@Override
	public void deleteCategory(int id) {
		Categories category = categoryRepository.findById(id).orElseThrow();
		categoryRepository.delete(category);
	}

	@Override
	public void deleteAll() {
		categoryRepository.deleteAll();
	}

	@Override
	public void updateCategoryRequest(UpdateCategoryRequest updateCategoryRequest) {
		categoryRepository.findById(updateCategoryRequest.getId()).orElseThrow();
		Categories categoryRequest = mapperService.forRequest().map(updateCategoryRequest, Categories.class);
		categoryRepository.save(categoryRequest);
	}
}
