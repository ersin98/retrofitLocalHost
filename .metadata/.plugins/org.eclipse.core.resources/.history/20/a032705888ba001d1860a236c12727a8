package com.ersin.retrofitDemo.business.concretes;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.ersin.retrofitDemo.business.abstracts.CategoryService;
import com.ersin.retrofitDemo.business.mappers.ModelMapperService;
import com.ersin.retrofitDemo.business.requests.category.CreateCategoryRequest;
import com.ersin.retrofitDemo.business.requests.category.UpdateCategoryRequest;
import com.ersin.retrofitDemo.business.responses.category.CategoryResponse;
import com.ersin.retrofitDemo.business.responses.category.GetAllCategoryResponse;
import com.ersin.retrofitDemo.dataAccess.abstracts.CategoryRepository;
import com.ersin.retrofitDemo.entities.concretes.Categories;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class CategoryManager implements CategoryService {
	private CategoryRepository categoryRepository;
	private ModelMapperService mapperService;

	@Override
	public List<GetAllCategoryResponse> getAll() {
		List<Categories> categories = categoryRepository.findAll();
		List<GetAllCategoryResponse> getAllCategoryResponses = categories.stream()
				.map(category -> mapperService.forResponse().map(categories, GetAllCategoryResponse.class))
				.collect(Collectors.toList());
		return getAllCategoryResponses;
	}

	@Override
	public void addCategory(CreateCategoryRequest createcategoryRequest) {
		Categories category = new Categories();
		mapperService.forRequest().map(category, CreateCategoryRequest.class);
		categoryRepository.save(category);
	}

	@Override
	public void deleteCategory(int id) {
		Categories category = categoryRepository.findById(id).orElseThrow();
		categoryRepository.delete(category);
	}

	@Override
	public void deleteAll() {
		categoryRepository.deleteAll();
	}

	@Override
	public void updateCategoryRequest(UpdateCategoryRequest updateCategoryRequest) {
		Categories categoryFromRepository = categoryRepository.findById(updateCategoryRequest.getId()).orElseThrow();
		Categories categoryUpdate = new Categories();

		BeanUtils.copyProperties(categoryFromRepository.get(), categoryUpdate);
		categoryUpdate = emptyErrorCheckItem(categoryUpdate);
		if (categoryUpdate.getName().equalsIgnoreCase("update")) {
			categoryFromRepository.get().setName(updateCategoryRequest.getName());
		}
		CategoryResponse categoryResponse = new CategoryResponse();

		categoryResponse.setDone(false);
		String errorMassage = "";

		if (errorMassage.isEmpty())// veri tekrarı hatası
			errorMassage = repeatErrorCheck(categoryFromRepository.get());

		if (!errorMassage.isEmpty()) {
			categoryResponse.setErrorMassage(errorMassage);
			categoryResponse.setSuitable(false);
		} else {
			categoryResponse.setSuitable(true);
		}

		if (categoryResponse.getSuitable()) {
			categoryRepository.save(categoryFromRepository.get());
			categoryResponse.setDone(true);
		}
		return categoryResponse;
	}
}
