package com.ersin.retrofitDemo.business.concretes;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.ersin.retrofitDemo.business.abstracts.ProductService;
import com.ersin.retrofitDemo.business.mappers.ProductMapperService;
import com.ersin.retrofitDemo.business.requests.product.CreateProductRequest;
import com.ersin.retrofitDemo.business.requests.product.GetCategoryProductResponse;
import com.ersin.retrofitDemo.business.requests.product.UpdateProductRequest;
import com.ersin.retrofitDemo.business.responses.product.GetAllProductResponse;
import com.ersin.retrofitDemo.business.responses.product.GetByQueryProductResponse;
import com.ersin.retrofitDemo.dataAccess.abstracts.CategoryRepository;
import com.ersin.retrofitDemo.dataAccess.abstracts.ProductRepository;
import com.ersin.retrofitDemo.entities.concretes.Categories;
import com.ersin.retrofitDemo.entities.concretes.Products;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@AllArgsConstructor
public class ProductManager implements ProductService {
	private ProductRepository productRepository;
	private CategoryRepository categoryRepository;
	private ProductMapperService mapperService;

	@Override
	public List<GetAllProductResponse> getAll() {
		List<Products> products = productRepository.findAll();
		List<GetAllProductResponse> productResponses = products.stream()
				.map(brand -> mapperService.forResponse().map(brand, GetAllProductResponse.class))
				.collect(Collectors.toList());
		// .peek(response
		// ->response.setCategoryID(response.getCategoryID())).collect(Collectors.toList());

		return productResponses;
	}

	@Override
	public void addProduct(CreateProductRequest createProductRequest) {
		Products product = mapperService.forRequest().map(createProductRequest, Products.class);
		if (createProductRequest.getCategoryID() != null) {
			Categories category = categoryRepository.findById(createProductRequest.getCategoryID()).orElseThrow();
			product.setCategory(category);
		}
		productRepository.save(product);
	}

	@Override
	public List<GetByQueryProductResponse> getByTitle(String title) {
		List<Products> product = productRepository.findByTitleContaining(title).orElseThrow();
		List<GetByQueryProductResponse> productResponses = product.stream()
				.map(brand -> mapperService.forResponse().map(brand, GetByQueryProductResponse.class))
				.peek(response -> response.setCategoryID(response.getCategoryID()))// peek say覺s覺 artt覺r覺labilir.
				.collect(Collectors.toList());
		return productResponses;
	}

	@Override
	public void deleteProduct(int id) {
		Products product = productRepository.findById(id).orElseThrow();
		productRepository.delete(product);
	}

	@Override
	public void updateProductRequest(UpdateProductRequest updateProductRequest) {
		Products productFromRepository = productRepository.findById(updateProductRequest.getId()).orElseThrow();// .get()

		BeanUtils.copyProperties(updateProductRequest, Updateproduct);

		Categories categories = categoryRepository.findById(updateProductRequest.getCategoryID()).orElseThrow();
		Updateproduct.setCategory(categories);
		productRepository.save(productFromRepository.get());
	}

	@Override
	public void deleteAll() {
		productRepository.deleteAll();
	}

	@Override
	public List<GetCategoryProductResponse> getByCategory(Integer id) {
		List<GetCategoryProductResponse> products = new ArrayList<GetCategoryProductResponse>();
		Optional<Categories> category = categoryRepository.findById(id);
		if (category.isPresent()) {
			Optional<List<Products>> productFromRepository = productRepository.findByCategory(category.get());

			for (Products product : productFromRepository.get()) {
				GetCategoryProductResponse responseItem = new GetCategoryProductResponse();
				BeanUtils.copyProperties(product, responseItem);
				responseItem.setCategoryID(product.getCategory().getId());
				products.add(responseItem);
			}
		}
		return products;
	}
}
